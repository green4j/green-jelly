name: Publish CI

on:
  workflow_dispatch:
    inputs:
      nextVersion: # Next version with the '-SNAPSHOT' suffix will be written to gradle.properties IF NOT SET TO 'CURRENT' while running
        description: 'Next Version'
        default: 'CURRENT'
        required: true
env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.java.installations.auto-detect=false -Dorg.gradle.warning.mode=fail"
jobs:
  build:
    runs-on: 'ubuntu-20.04'
    steps:
    - name: Say next version
      run: echo "Next version ${{ github.event.inputs.nextVersion }}"
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Cache Gradle wrapper
      uses: actions/cache@v3
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
    - name: Prepare release version
      id: prv
      #if: ${{ github.event.inputs.nextVersion != 'CURRENT' }}
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git fetch
        snapshotVersion=`grep 'projectVersion=' gradle.properties | sed 's/projectVersion=\([^-]*\)/\1/'`
        echo "$snapshotVersion"
        if [[ "${{ github.event.inputs.nextVersion }}" == "CURRENT" ]]
        then
          releaseVersion=$snapshotVersion
        else
          releaseVersion=`echo $snapshotVersion | sed 's/\([^-]*\)-SNAPSHOT/\1/'`
          sed -i "s/projectVersion=$snapshotVersion/projectVersion=$releaseVersion/" gradle.properties
        fi
        echo ::set-output name=releaseVersion::$releaseVersion
    - name: Setup java 8 to run the Gradle script
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: 8
    - name: Test and publish to Maven Central
      run: ./gradlew test publish
      env:
        OSSRH_USERNAME:          ${{ secrets.OSSRH_USERNAME }}
        OSSRH_PASSWORD:          ${{ secrets.OSSRH_PASSWORD }}
        SIGNING_GPG_SECRET_KEY:  ${{ secrets.SIGNING_GPG_SECRET_KEY }}
        SIGNING_GPG_PASSWORD:    ${{ secrets.SIGNING_GPG_PASSWORD }}
    - name: Set next snapshot version if required and make new tag
      run: |
        if [[ "${{ github.event.inputs.nextVersion }}" != "CURRENT" ]]
        then
          releaseVersion=${{ steps.prv.outputs.releaseVersion }}
          echo $releaseVersion
          echo "git tag v$releaseVersion -m \"Rev tag set to v$releaseVersion\""
          git tag v$releaseVersion -m "Revision tag v$releaseVersion prepared"
          git push origin v$releaseVersion
          sed -i "s/projectVersion=$releaseVersion/projectVersion=${{ github.event.inputs.nextVersion }}-SNAPSHOT/" gradle.properties
          git commit -am "[skip actions] Set next snapshot version"
          git push origin
        fi
