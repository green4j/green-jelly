name: Publish CI

on:
  workflow_dispatch:
    inputs:
      nextVersion:
        description: 'Next Version'
        default: 'CURRENT'
        required: true
env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.java.installations.auto-detect=false -Dorg.gradle.warning.mode=fail"
jobs:
  build:
    runs-on: 'ubuntu-20.04'
    steps:
    - name: Say next version
      run: echo "Next version ${{ github.event.inputs.nextVersion }}"
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Read current snapshot version
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git fetch
        versionSnapshot=`grep 'projectVersion=' gradle.properties | sed 's/projectVersion=\([^-]*\)/\1/'`
        echo "$versionSnapshot"
        echo ::set-output name=versionSnapshot::"$versionSnapshot"
        echo "${{ steps.vars.outputs.versionSnapshot }}"
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Cache Gradle wrapper
      uses: actions/cache@v3
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
    - name: Generate release version if required
      if: ${{ github.event.inputs.nextVersion != 'CURRENT' }}
      run: |
        versionSnapshot="${{ steps.vars.outputs.versionSnapshot }}"
        echo "$versionSnapshot"
        versionRelease=`echo $versionSnapshot | sed 's/\([^-]*\)-SNAPSHOT/\1/'`
        sed -i "s/projectVersion=$versionSnapshot/projectVersion=$versionRelease/" gradle.properties
        git commit -am "[skip actions] Generate release version"
        echo ::set-output name=versionRelease::"versionRelease"
    - name: Remember current version if not changed
      if: ${{ github.event.inputs.nextVersion == 'CURRENT' }}
      run: |
        versionRelease=$versionSnapshot
        echo ::set-output name=versionRelease::"versionRelease"
    - name: Setup java 8 to run the Gradle script
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: 8
    - name: Test and publish to Maven Central
      # run: ./gradlew test publish
      run: echo "./gradlew test publish"
      env:
        SONATYPE_REPOSITORY:      ${{ secrets.SONATYPE_REPOSITORY }}
        SONATYPE_NEXUS_USERNAME:  ${{ secrets.SONATYPE_NEXUS_USERNAME }}
        SONATYPE_NEXUS_PASSWORD:  ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
        SIGNING_PRIVATE_KEY:      ${{ secrets.SIGNING_PRIVATE_KEY }}
        SIGNING_PASSWORD:         ${{ secrets.SIGNING_PASSWORD }}
    - name: Set next snapshot version if required
      if: ${{ github.event.inputs.nextVersion != 'CURRENT' }}
      run: |
        versionSnapshot="${{ steps.vars.outputs.versionSnapshot }}"
        versionRelease="${{ steps.vars.outputs.versionRelease }}"
        versionSnapshot="${{ github.event.inputs.nextVersion }}-SNAPSHOT"
        sed -i "s/projectVersion=$versionRelease/projectVersion=$versionSnapshot/" gradle.properties
        git commit -am "[skip actions] Set next snapshot version"
    - name: Make new tag
      run: |
        versionRelease="${{ steps.vars.outputs.versionRelease }}"
        echo 'git tag "v$versionRelease" -m, "Rev tag set to $versionRelease"'
        git tag "v$versionRelease" -m, "Rev tag set to $versionRelease"
        git push origin
